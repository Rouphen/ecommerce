// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ecommerce/product-service/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, product
func (_m *ProductUsecase) Create(ctx context.Context, product *domain.Product) domain.ProdcutResponse {
	ret := _m.Called(ctx, product)

	var r0 domain.ProdcutResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) domain.ProdcutResponse); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(domain.ProdcutResponse)
	}

	return r0
}

// DecreaseStock provides a mock function with given fields: ctx, reqId, orderId
func (_m *ProductUsecase) DecreaseStock(ctx context.Context, reqId int64, orderId int64) domain.ProdcutResponse {
	ret := _m.Called(ctx, reqId, orderId)

	var r0 domain.ProdcutResponse
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) domain.ProdcutResponse); ok {
		r0 = rf(ctx, reqId, orderId)
	} else {
		r0 = ret.Get(0).(domain.ProdcutResponse)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, eqId
func (_m *ProductUsecase) GetByID(ctx context.Context, eqId int64) (domain.Product, domain.ProdcutResponse) {
	ret := _m.Called(ctx, eqId)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Product); ok {
		r0 = rf(ctx, eqId)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 domain.ProdcutResponse
	if rf, ok := ret.Get(1).(func(context.Context, int64) domain.ProdcutResponse); ok {
		r1 = rf(ctx, eqId)
	} else {
		r1 = ret.Get(1).(domain.ProdcutResponse)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUsecase creates a new instance of ProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUsecase(t mockConstructorTestingTNewProductUsecase) *ProductUsecase {
	mock := &ProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
