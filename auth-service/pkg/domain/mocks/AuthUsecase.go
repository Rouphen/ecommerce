// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "ecommerce/auth-service/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, user
func (_m *AuthUsecase) Login(ctx context.Context, user *domain.User) domain.LoginResponse {
	ret := _m.Called(ctx, user)

	var r0 domain.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.LoginResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.LoginResponse)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, user
func (_m *AuthUsecase) Register(ctx context.Context, user *domain.User) domain.RegisterResponse {
	ret := _m.Called(ctx, user)

	var r0 domain.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.RegisterResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.RegisterResponse)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, user
func (_m *AuthUsecase) Validate(ctx context.Context, user *domain.User) domain.ValidateResponse {
	ret := _m.Called(ctx, user)

	var r0 domain.ValidateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.ValidateResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.ValidateResponse)
	}

	return r0
}

type mockConstructorTestingTNewAuthUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthUsecase(t mockConstructorTestingTNewAuthUsecase) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
